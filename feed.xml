<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX Open Source Project</title>
    <description>Focus on cross-platform development using c language</description>
    <link>http://www.tboox.org/</link>
    <atom:link href="http://www.tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 28 Sep 2017 11:28:04 +0800</pubDate>
    <lastBuildDate>Thu, 28 Sep 2017 11:28:04 +0800</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>xmake 源码架构剖析</title>
        <description>&lt;p&gt;本文主要介绍下&lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;xmake&lt;/a&gt;的整体架构设计，以及源码结构的布局和模块划分。
如果你想深度使用xmake，开发xmake插件、工程自定义脚本或者想为xmake贡献一些代码和特性，可以通过此本的介绍，对xmake项目整体有个大概的了解。，&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;顶层目录结构&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./xmake/
├── actions    &lt;span class=&quot;c&quot;&gt;# 内建的一些基础task，用于基本的构建安装等操作&lt;/span&gt;
├── core       &lt;span class=&quot;c&quot;&gt;# xmake的核心模块，提供最底层的实现支持&lt;/span&gt;
├── languages  &lt;span class=&quot;c&quot;&gt;# 所有的语言相关特性支持和扩展，都在此目录下&lt;/span&gt;
├── modules    &lt;span class=&quot;c&quot;&gt;# 内置的扩展模块，可用`import`导入使用&lt;/span&gt;
├── packages   &lt;span class=&quot;c&quot;&gt;# 内置包目录，提供xmake所需的一些必须依赖包支持，例如：git等，其他第三方包放在独立xmake-repo下&lt;/span&gt;
├── platforms  &lt;span class=&quot;c&quot;&gt;# 平台支持目录，提供各个构建平台的配置信息和脚本&lt;/span&gt;
├── plugins    &lt;span class=&quot;c&quot;&gt;# 插件目录，提供一些内置的插件支持，例如：生成IDE工程，宏脚本等。。&lt;/span&gt;
├── scripts    &lt;span class=&quot;c&quot;&gt;# 放置一些杂七杂八的shell、perl等其他语言脚本，例如：gas-preprocessor.pl&lt;/span&gt;
└── templates  &lt;span class=&quot;c&quot;&gt;# 工程模板目录，提供一些`xmake create`创建工程所需的内置模板&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;沙盒模式&lt;/h2&gt;

&lt;p&gt;为了简化&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;中自己定义脚本、插件脚本以及扩展模块的开发，提供更高的安全性，xmake采用了沙盒的方式去加载他们，每个脚本都独立在一个单独的沙盒中，并且有独立的作用域支持。&lt;/p&gt;

&lt;p&gt;在xmake的整个目录结构中，除了&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake/core&lt;/code&gt;底层核心模块，其他的顶层目录全部放置在沙盒中加载运行，来简化代码开发，提高易用性和安全性。&lt;/p&gt;

&lt;p&gt;这样有什么好处呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上层模块的开发跟xmake的core代码完全隔离，不会干扰到xmake的底层核心模块，更加安全&lt;/li&gt;
  &lt;li&gt;作用域只提供当前模块所需api的最小子集支持&lt;/li&gt;
  &lt;li&gt;提供内置异常处理机制，以及api调用的返回值、传参有效性检测，代码出错后，会及时报出异常信息，并提供详细栈来定位问题&lt;/li&gt;
  &lt;li&gt;可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;import(&quot;core.base.task&quot;)&lt;/code&gt;的模块导入方式，提供更加方便高效的模块加载支持&lt;/li&gt;
  &lt;li&gt;通过异常机制，简化代码的编写，可以简化30%的代码量，以及错误判断&lt;/li&gt;
  &lt;li&gt;常用接口字符串参数，支持&lt;code class=&quot;highlighter-rouge&quot;&gt;$(val)&lt;/code&gt;等内置变量的自动转换&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我们可以直观感受下&lt;code class=&quot;highlighter-rouge&quot;&gt;原生代码&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;沙盒代码&lt;/code&gt;的区别：&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;导入和返回值判断的改进&lt;/h4&gt;

&lt;p&gt;原生代码：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modules/test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arg1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;arg2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;沙盒代码：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modules.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arg1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;arg2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;test.run&lt;/code&gt;运行出错，会自动中断，并显示出错信息。&lt;/p&gt;

&lt;p&gt;import的导入比lua原生的require更加的强大易用，支持很多高级特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多级多目录导入支持，模块的搜索目录可以有多个，也可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;中自己指定&lt;/li&gt;
  &lt;li&gt;通过指定父目录，批量加载所有模块，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;import(&quot;core&quot;)&lt;/code&gt;会加载core目录下的所有模块，并且通过&lt;code class=&quot;highlighter-rouge&quot;&gt;core.xxx&lt;/code&gt;来访问&lt;/li&gt;
  &lt;li&gt;支持模块继承导入&lt;/li&gt;
  &lt;li&gt;支持匿名导入和缓存优化&lt;/li&gt;
  &lt;li&gt;支持别名设置&lt;/li&gt;
  &lt;li&gt;通过下划线区分，仅导入公有接口&lt;/li&gt;
  &lt;li&gt;自动识别main函数，可直接调用，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;import(&quot;test&quot;)(args)&lt;/code&gt;，会自动调用test模块中的main函数&lt;/li&gt;
  &lt;li&gt;支持&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake lua&lt;/code&gt;直接加载测试，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake l lib.detect.find_package zlib&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;api&quot;&gt;内置api的改进&lt;/h4&gt;

&lt;p&gt;原生代码：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello xmake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xmake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;沙盒代码：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello xmake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xmake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xmake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello $(var)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-3&quot;&gt;空参数的判断改进&lt;/h4&gt;

&lt;p&gt;原生代码：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
            &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;沙盒代码：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-4&quot;&gt;简化模块定义&lt;/h4&gt;

&lt;p&gt;原生代码：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;沙盒代码：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;actions&quot;&gt;Actions目录&lt;/h2&gt;

&lt;p&gt;这个目录下提供xmake日常所需的最基础命令，提供配置、编译、打包、安装、运行、调试、卸载等功能。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./xmake/actions/
├── build       &lt;span class=&quot;c&quot;&gt;# 构建工程&lt;/span&gt;
├── clean       &lt;span class=&quot;c&quot;&gt;# 清理构建产生的文件&lt;/span&gt;
├── config      &lt;span class=&quot;c&quot;&gt;# 构建前的工程配置&lt;/span&gt;
├── create      &lt;span class=&quot;c&quot;&gt;# 根据模板创建工程&lt;/span&gt;
├── global      &lt;span class=&quot;c&quot;&gt;# 全局配置&lt;/span&gt;
├── install     &lt;span class=&quot;c&quot;&gt;# 安装构建好的目标文件到系统&lt;/span&gt;
├── package     &lt;span class=&quot;c&quot;&gt;# 打包当前平台下的构建文件&lt;/span&gt;
├── require     &lt;span class=&quot;c&quot;&gt;# 获取依赖包&lt;/span&gt;
├── run         &lt;span class=&quot;c&quot;&gt;# 运行、调试目标程序&lt;/span&gt;
└── uninstall   &lt;span class=&quot;c&quot;&gt;# 卸载安装到系统的目标文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;modules&quot;&gt;Modules目录&lt;/h2&gt;

&lt;p&gt;这个是扩展模块目录，提供了一些常用的模块，来扩展&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;的自定义脚本，提供更多高级特性，例如：编译器特性检测、依赖包检测等。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./xmake/modules/
├── core
│   └── tools &lt;span class=&quot;c&quot;&gt;# 这个下面的模块，主要用于扩展xmake的编译工具链&lt;/span&gt;
│       ├── ar.lua
│       ├── cl.lua
│       ├── clang.lua
│       ├── clangxx.lua
│       ├── dmd.lua
│       ├── gcc.lua
│       ├── gccgo.lua
│       ├── gdc.lua
│       ├── go.lua
│       ├── gxx.lua
│       ├── ldc.lua
│       ├── lib.lua
│       ├── link.lua
│       ├── ml.lua
│       ├── ml64.lua
│       ├── rc.lua
│       ├── rustc.lua
│       └── swiftc.lua
├── detect
│   ├── packages &lt;span class=&quot;c&quot;&gt;# 用于增强find_package接口的探测&lt;/span&gt;
│   │   ├── find_mbedtls.lua
│   │   ├── find_mysql.lua
│   │   ├── find_openssl.lua
│   │   ├── find_pcre.lua
│   │   ├── find_pcre2.lua
│   │   └── find_zlib.lua
│   ├── sdks &lt;span class=&quot;c&quot;&gt;# 用于查找一些编译sdk环境&lt;/span&gt;
│   │   ├── find_cross_toolchains.lua
│   │   ├── find_ndk_sdkvers.lua
│   │   ├── find_ndk_toolchains.lua
│   │   ├── find_vstudio.lua
│   │   ├── find_xcode_dir.lua
│   │   └── find_xcode_sdkvers.lua
│   └── tools &lt;span class=&quot;c&quot;&gt;# 用于增强可执行工具的查找、特性检测&lt;/span&gt;
│       ├── find_7z.lua
│       ├── find_apt.lua
│       ├── find_ar.lua
│       ├── find_brew.lua
│       ├── find_ccache.lua
│       ├── find_cl.lua
│       ├── find_clang.lua
│       ├── find_clangxx.lua
│       ├── find_curl.lua
│       ├── find_dmd.lua
│       ├── find_doxygen.lua
│       ├── find_gcc.lua
│       ├── find_gccgo.lua
│       ├── find_gdb.lua
│       ├── find_gdc.lua
│       ├── find_git.lua
│       ├── find_go.lua
│       ├── find_gxx.lua
│       ├── find_gzip.lua
│       ├── find_ldc2.lua
│       ├── find_lib.lua
│       ├── find_link.lua
│       ├── find_lipo.lua
│       ├── find_lldb.lua
│       ├── find_ml.lua
│       ├── find_ml64.lua
│       ├── find_ollydbg.lua
│       ├── find_pacman.lua
│       ├── find_ping.lua
│       ├── find_pkg_config.lua
│       ├── find_rc.lua
│       ├── find_rustc.lua
│       ├── find_sudo.lua
│       ├── find_swiftc.lua
│       ├── find_tar.lua
│       ├── find_unzip.lua
│       ├── find_vsjitdebugger.lua
│       ├── find_wget.lua
│       ├── find_windbg.lua
│       ├── find_x64dbg.lua
│       ├── find_yum.lua
│       ├── find_zip.lua
├── devel
│   ├── debugger &lt;span class=&quot;c&quot;&gt;# 调试器支持&lt;/span&gt;
│   │   └── run.lua
│   └── git &lt;span class=&quot;c&quot;&gt;# git模块的扩展封装&lt;/span&gt;
│       ├── branches.lua
│       ├── checkout.lua
│       ├── checkurl.lua
│       ├── clean.lua
│       ├── clone.lua
│       ├── ls_remote.lua
│       ├── pull.lua
│       ├── refs.lua
│       └── tags.lua
├── lib
│   └── detect &lt;span class=&quot;c&quot;&gt;# 这个模块，比较实用，用于各种编译器特性探测、语言类型和函数检测&lt;/span&gt;
│       ├── check_cxsnippets.lua
│       ├── features.lua
│       ├── find_tool.lua
│       ├── find_toolname.lua
│       ├── has_cfuncs.lua
│       ├── has_cincludes.lua
│       ├── has_ctypes.lua
│       ├── has_cxxfuncs.lua
│       ├── has_cxxincludes.lua
│       ├── has_cxxtypes.lua
│       ├── has_features.lua
│       ├── has_flags.lua
│       └── pkg_config.lua
├── net &lt;span class=&quot;c&quot;&gt;# 网络模块&lt;/span&gt;
│   ├── fasturl.lua
│   ├── http 
│   │   └── download.lua &lt;span class=&quot;c&quot;&gt;# http下载模块，自动检测curl/wget并调用&lt;/span&gt;
│   └── ping.lua
├── package
│   └── manager &lt;span class=&quot;c&quot;&gt;# 系统第三方包管理工具的封装，提供一致性包安装&lt;/span&gt;
│       ├── apt
│       │   └── install.lua
│       ├── brew
│       │   └── install.lua
│       ├── install.lua
│       ├── pacman
│       │   └── install.lua
│       └── yum
│           └── install.lua
├── privilege &lt;span class=&quot;c&quot;&gt;# 权限管理&lt;/span&gt;
│   └── sudo.lua
└── utils
    └── archive &lt;span class=&quot;c&quot;&gt;# 归档文件的压缩和解压，支持系统常用归档格式：zip/7z/gz/tar/bz2等，自动检测和适配解压工具&lt;/span&gt;
        └── extract.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins目录&lt;/h2&gt;

&lt;p&gt;放置内置插件的目录，里面内置了一些常用插件，我们也可以自己扩展插件，或者从&lt;a href=&quot;https://github.com/tboox/xmake-plugins&quot;&gt;xmake-plugins&lt;/a&gt;上面下载一些扩展插件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./xmake/plugins/
├── doxygen         &lt;span class=&quot;c&quot;&gt;# doxygen文档生成插件&lt;/span&gt;
├── hello           &lt;span class=&quot;c&quot;&gt;# xmake插件的一个demo&lt;/span&gt;
├── lua             &lt;span class=&quot;c&quot;&gt;# 加载和测试lua脚本、xmake的模块，例如：xmake l lib.detect.find_tool git&lt;/span&gt;
│   └── scripts 
├── macro           &lt;span class=&quot;c&quot;&gt;# 宏记录插件，记录和回放所有执行过的xmake命令，一般用于批量构建和打包&lt;/span&gt;
│   └── macros
├── project         &lt;span class=&quot;c&quot;&gt;# IDE工程文件生成插件，支持：vs200x, vs201x, makefile等工程文件&lt;/span&gt;
│   ├── clang
│   ├── makefile
│   └── vstudio
└── repo            &lt;span class=&quot;c&quot;&gt;# 依赖包仓库管理&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;platforms&quot;&gt;Platforms目录&lt;/h2&gt;

&lt;p&gt;提供一些构建平台的配置和脚本处理，也可自行扩展自己的平台。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./xmake/platforms/
├── android   &lt;span class=&quot;c&quot;&gt;# 基于android ndk的编译&lt;/span&gt;
├── cross     &lt;span class=&quot;c&quot;&gt;# 主要用于交叉编译 &lt;/span&gt;
├── iphoneos  &lt;span class=&quot;c&quot;&gt;# ios平台的编译，支持模拟器架构&lt;/span&gt;
├── linux     &lt;span class=&quot;c&quot;&gt;# linux平台，也支持linux环境的交叉编译工具链&lt;/span&gt;
├── macosx    &lt;span class=&quot;c&quot;&gt;# macosx的环境编译&lt;/span&gt;
├── mingw     &lt;span class=&quot;c&quot;&gt;# 基于mingw工具链的编译，支持windows/macosx/linux下的mingw&lt;/span&gt;
├── watchos   &lt;span class=&quot;c&quot;&gt;# apple watch 平台的编译&lt;/span&gt;
└── windows   &lt;span class=&quot;c&quot;&gt;# windows平台的编译，可直接在cmd终端下进行，不需要cygwin/msys支持&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;languages&quot;&gt;Languages目录&lt;/h2&gt;

&lt;p&gt;这个目录提供xmake编译指定的代码语言所需的一些配置信息和脚本处理，我们可以自己扩展这个目录，来提供其他语言编译的支持。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./xmake/languages/
├── asm
├── c++
├── dlang
├── golang
├── msrc
├── objc++
├── rust
└── swift
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;templates&quot;&gt;Templates目录&lt;/h2&gt;

&lt;p&gt;这个目录主要提供&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake create&lt;/code&gt;创建空工程所需的一些内置工程模板。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./xmake/templates/
├── c
│   ├── console
│   ├── console_tbox
│   ├── shared_library
│   ├── shared_library_tbox
│   ├── static_library
│   └── static_library_tbox
├── c++
│   ├── console
│   ├── console_tbox
│   ├── shared_library
│   ├── shared_library_tbox
│   ├── static_library
│   └── static_library_tbox
├── dlang
│   ├── console
│   ├── shared_library
│   └── static_library
├── go
│   ├── console
│   └── static_library
├── objc
│   └── console
├── objc++
│   └── console
├── rust
│   ├── console
│   └── static_library
└── swift
    └── console
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;core&quot;&gt;Core目录&lt;/h2&gt;

&lt;p&gt;core比较复杂，它是xmake最底层的支撑，提供了沙盒机制、解释器、工程处理、基础模块、插件加载的核心实现，里面的所有模块都不在沙盒里面，所以跟其他目录里面的模块是完全隔离的。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./xmake/core/
├── _xmake_main.lua &lt;span class=&quot;c&quot;&gt;# xmake的脚本起始入口&lt;/span&gt;
├── base &lt;span class=&quot;c&quot;&gt;# 基础模块&lt;/span&gt;
│   ├── colors.lua &lt;span class=&quot;c&quot;&gt;# ${red}等色彩输出的基础支持&lt;/span&gt;
│   ├── coroutine.lua &lt;span class=&quot;c&quot;&gt;# 协程封装&lt;/span&gt;
│   ├── deprecated.lua
│   ├── emoji.lua
│   ├── filter.lua &lt;span class=&quot;c&quot;&gt;# $(val)变量的处理器&lt;/span&gt;
│   ├── global.lua
│   ├── interpreter.lua &lt;span class=&quot;c&quot;&gt;# xmake.lua的解释器&lt;/span&gt;
│   ├── io.lua
│   ├── option.lua &lt;span class=&quot;c&quot;&gt;# 命令行输入参数的解析和获取&lt;/span&gt;
│   ├── os.lua
│   ├── path.lua
│   ├── privilege.lua
│   ├── process.lua
│   ├── profiler.lua &lt;span class=&quot;c&quot;&gt;# 性能分析器&lt;/span&gt;
│   ├── string.lua
│   ├── table.lua
│   ├── task.lua &lt;span class=&quot;c&quot;&gt;# task任务、插件处理模块&lt;/span&gt;
│   └── utils.lua
├── language &lt;span class=&quot;c&quot;&gt;# 代码语言模块，会去加载languages目录下的指定语言配置&lt;/span&gt;
│   ├── language.lua
│   └── menu.lua
├── main.lua &lt;span class=&quot;c&quot;&gt;# xmake的主入口&lt;/span&gt;
├── package &lt;span class=&quot;c&quot;&gt;# 包依赖支持&lt;/span&gt;
│   ├── package.lua
│   └── repository.lua
├── platform &lt;span class=&quot;c&quot;&gt;# 平台管理&lt;/span&gt;
│   ├── environment.lua
│   ├── menu.lua
│   └── platform.lua
├── project &lt;span class=&quot;c&quot;&gt;# 工程管理相关的一些模块&lt;/span&gt;
│   ├── cache.lua &lt;span class=&quot;c&quot;&gt;# 工程缓存维护&lt;/span&gt;
│   ├── config.lua &lt;span class=&quot;c&quot;&gt;# 工程配置文件维护&lt;/span&gt;
│   ├── history.lua
│   ├── option.lua &lt;span class=&quot;c&quot;&gt;# option对象的封装&lt;/span&gt;
│   ├── project.lua &lt;span class=&quot;c&quot;&gt;# 工程xmake.lua加载和解析&lt;/span&gt;
│   ├── target.lua &lt;span class=&quot;c&quot;&gt;# target对象的封装&lt;/span&gt;
│   └── template.lua &lt;span class=&quot;c&quot;&gt;# 工程模板的加载&lt;/span&gt;
├── sandbox &lt;span class=&quot;c&quot;&gt;# 沙盒模块&lt;/span&gt;
│   ├── modules &lt;span class=&quot;c&quot;&gt;# 这里面也提供了一些内置沙盒模块，跟modules目录下的模块的区别就是，这里的模块实现代码本身不基于沙盒，纯原生底层代码实现，可直接调用底层接口&lt;/span&gt;
│   │   ├── _g.lua &lt;span class=&quot;c&quot;&gt;# 这里的模块不需要import，可直接在沙盒脚本中使用&lt;/span&gt;
│   │   ├── assert.lua
│   │   ├── catch.lua
│   │   ├── coroutine.lua
│   │   ├── cprint.lua
│   │   ├── cprintf.lua
│   │   ├── debug.lua
│   │   ├── finally.lua
│   │   ├── format.lua
│   │   ├── hash.lua
│   │   ├── ifelse.lua
│   │   ├── import &lt;span class=&quot;c&quot;&gt;# 这里面也提供了一些import所需的内置沙盒模块，里面的实现代码，可直接调用core里面底层接口，并且做了异常捕获和返回值检测&lt;/span&gt;
│   │   │   ├── core
│   │   │   │   ├── base
│   │   │   │   │   ├── colors.lua
│   │   │   │   │   ├── filter.lua
│   │   │   │   │   ├── global.lua
│   │   │   │   │   ├── option.lua
│   │   │   │   │   ├── privilege.lua
│   │   │   │   │   ├── semver.lua
│   │   │   │   │   └── task.lua
│   │   │   │   ├── language
│   │   │   │   │   ├── language.lua
│   │   │   │   │   └── menu.lua
│   │   │   │   ├── package
│   │   │   │   │   ├── package.lua
│   │   │   │   │   └── repository.lua
│   │   │   │   ├── platform
│   │   │   │   │   ├── environment.lua
│   │   │   │   │   ├── menu.lua
│   │   │   │   │   └── platform.lua
│   │   │   │   ├── project
│   │   │   │   │   ├── cache.lua
│   │   │   │   │   ├── config.lua
│   │   │   │   │   ├── history.lua
│   │   │   │   │   ├── menu.lua
│   │   │   │   │   ├── project.lua
│   │   │   │   │   ├── target.lua
│   │   │   │   │   ├── task.lua
│   │   │   │   │   └── template.lua
│   │   │   │   ├── sandbox
│   │   │   │   │   ├── module.lua
│   │   │   │   │   └── sandbox.lua
│   │   │   │   └── tool
│   │   │   │       ├── compiler.lua
│   │   │   │       ├── extractor.lua
│   │   │   │       └── linker.lua
│   │   │   └── lib
│   │   │       └── detect &lt;span class=&quot;c&quot;&gt;# lib.detect.* 下的部分探测接口，跟modules下的那些类似&lt;/span&gt;
│   │   │           ├── cache.lua
│   │   │           ├── find_directory.lua
│   │   │           ├── find_file.lua
│   │   │           ├── find_library.lua
│   │   │           ├── find_package.lua
│   │   │           ├── find_path.lua
│   │   │           ├── find_program.lua
│   │   │           └── find_programver.lua
│   │   ├── import.lua &lt;span class=&quot;c&quot;&gt;# import接口实现&lt;/span&gt;
│   │   ├── inherit.lua
│   │   ├── insert.lua
│   │   ├── interpreter &lt;span class=&quot;c&quot;&gt;# xmake.lua上层描述域可直接调用的一些内置模块&lt;/span&gt;
│   │   │   ├── format.lua
│   │   │   ├── getenv.lua
│   │   │   ├── ifelse.lua
│   │   │   ├── ipairs.lua
│   │   │   ├── os.lua
│   │   │   ├── pairs.lua
│   │   │   ├── path.lua
│   │   │   ├── print.lua
│   │   │   ├── printf.lua
│   │   │   ├── string.lua
│   │   │   ├── table.lua
│   │   │   ├── tonumber.lua
│   │   │   ├── tostring.lua
│   │   │   └── type.lua
│   │   ├── io.lua &lt;span class=&quot;c&quot;&gt;# 这下面是一些不需要import的内置接口，部分接口做了些改进&lt;/span&gt;
│   │   ├── ipairs.lua
│   │   ├── math.lua
│   │   ├── os.lua
│   │   ├── pairs.lua
│   │   ├── path.lua
│   │   ├── print.lua
│   │   ├── printf.lua
│   │   ├── process.lua
│   │   ├── raise.lua
│   │   ├── string.lua
│   │   ├── table.lua
│   │   ├── tonumber.lua
│   │   ├── tostring.lua
│   │   ├── try.lua
│   │   ├── type.lua
│   │   ├── unpack.lua
│   │   ├── utils.lua
│   │   ├── val.lua
│   │   ├── vformat.lua
│   │   ├── vprint.lua
│   │   └── vprintf.lua
│   └── sandbox.lua
└── tool &lt;span class=&quot;c&quot;&gt;# 编译器、链接器等相关工具的封装模块，可通过`import(&quot;core.tool.compiler&quot;)`来使用&lt;/span&gt;
    ├── builder.lua
    ├── compiler.lua
    ├── extractor.lua
    ├── linker.lua
    └── tool.lua
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 28 Sep 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/09/28/xmake-sourcecode-arch/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/09/28/xmake-sourcecode-arch/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>源码</category>
        
        <category>架构设计</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>tbox v1.6.2 released, fix some bugs!</title>
        <description>&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add ping demo for network&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Modify license to Apache License 2.0&lt;/li&gt;
  &lt;li&gt;Rename &lt;code class=&quot;highlighter-rouge&quot;&gt;--smallest=y|n&lt;/code&gt; option to &lt;code class=&quot;highlighter-rouge&quot;&gt;--small=y|n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Support stat64&lt;/li&gt;
  &lt;li&gt;Improve copy speed and fix permissions for &lt;code class=&quot;highlighter-rouge&quot;&gt;tb_file_copy&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Improve path operation for posix platform&lt;/li&gt;
  &lt;li&gt;Improve socket interfaces and support icmp&lt;/li&gt;
  &lt;li&gt;Improve xmake.lua and remove binary packages&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix create file mode to 0644&lt;/li&gt;
  &lt;li&gt;Fix file and directory path bug&lt;/li&gt;
  &lt;li&gt;Fix remove directory with dead symbol link failed&lt;/li&gt;
  &lt;li&gt;Fix remove readonly file failed&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox/issues/34&quot;&gt;#34&lt;/a&gt;: Fix cache time and coroutine sleep bug&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox/issues/35&quot;&gt;#35&lt;/a&gt;: Fix epoll bug with the edge trigger mode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitee.com/tboox/tbox&quot;&gt;Gitee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 30 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2017/08/30/update-v1.6.2/</link>
        <guid isPermaLink="true">http://www.tboox.org/2017/08/30/update-v1.6.2/</guid>
        
        <category>tbox</category>
        
        <category>license</category>
        
        <category>bugs</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>tbox v1.6.2 更新，修复一些稳定性问题</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;增加ping测试程序&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修改license，使用更加宽松的Apache License 2.0&lt;/li&gt;
  &lt;li&gt;重命名&lt;code class=&quot;highlighter-rouge&quot;&gt;--smallest=y|n&lt;/code&gt;选项到&lt;code class=&quot;highlighter-rouge&quot;&gt;--small=y|n&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;stat64&lt;/code&gt;支持大文件信息获取&lt;/li&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;tb_file_copy&lt;/code&gt;，更加快速的文件copy，并且修复copy后文件权限丢失问题&lt;/li&gt;
  &lt;li&gt;改进posix平台下的路径操作&lt;/li&gt;
  &lt;li&gt;改进socket初始化接口，支持icmp协议&lt;/li&gt;
  &lt;li&gt;改进xmake.lua，移除内置二进制依赖包文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复创建文件权限不对问题&lt;/li&gt;
  &lt;li&gt;修复文件和目录路径问题&lt;/li&gt;
  &lt;li&gt;修复无法移除带有无效软链的目录问题&lt;/li&gt;
  &lt;li&gt;修复无法移除只读文件问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox/issues/34&quot;&gt;#34&lt;/a&gt;: 修复缓存时间和协程sleep不准问题&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox/issues/35&quot;&gt;#35&lt;/a&gt;: 修复epoll边缘触发模式下，centos上检测连接关闭失效问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;源码&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/tbox&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitee.com/tboox/tbox&quot;&gt;Gitee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 30 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/08/30/update-v1.6.2/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/08/30/update-v1.6.2/</guid>
        
        <category>tbox</category>
        
        <category>license</category>
        
        <category>稳定性修复</category>
        
        <category>版本更新</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>xmake v2.1.6版本正式发布，稳定性修复</title>
        <description>&lt;p&gt;此版本主要修复一些稳定性问题。&lt;/p&gt;

&lt;p&gt;更多使用说明，请阅读：&lt;a href=&quot;http://xmake.io/#/zh/&quot;&gt;文档手册&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;，支持对files粒度进行编译选项的各种配置，更加灵活。&lt;/li&gt;
  &lt;li&gt;从依赖的target和option中继承links和linkdirs。&lt;/li&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;target.add_deps&lt;/code&gt;接口，添加继承配置，允许手动禁止依赖继承，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps(&quot;test&quot;, {inherit = false})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;移除&lt;code class=&quot;highlighter-rouge&quot;&gt;tbox.pkg&lt;/code&gt;二进制依赖，直接集成tbox源码进行编译&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复目标级联依赖问题&lt;/li&gt;
  &lt;li&gt;修复&lt;code class=&quot;highlighter-rouge&quot;&gt;target:add&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;option:add&lt;/code&gt;问题&lt;/li&gt;
  &lt;li&gt;修复在archlinux上的编译和安装问题&lt;/li&gt;
  &lt;li&gt;修复&lt;code class=&quot;highlighter-rouge&quot;&gt;/ZI&lt;/code&gt;的兼容性问题，用&lt;code class=&quot;highlighter-rouge&quot;&gt;/Zi&lt;/code&gt;替代&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;演示视频&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/133693.js&quot; id=&quot;asciicast-133693&quot; async=&quot;&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Thu, 17 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/08/17/update-v2.1.6/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/08/17/update-v2.1.6/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>版本更新</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.1.6 released, fix some bugs</title>
        <description>&lt;p&gt;This release fixed some bugs and improve some compilation problem.&lt;/p&gt;

&lt;p&gt;If you want to known more usage, please see &lt;a href=&quot;http://xmake.io/#/home&quot;&gt;online documents&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt; to configure the compile option of the given files&lt;/li&gt;
  &lt;li&gt;Inherit links and linkdirs from the dependent targets and options&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;target.add_deps&lt;/code&gt; and add inherit config, .e.g &lt;code class=&quot;highlighter-rouge&quot;&gt;add_deps(&quot;test&quot;, {inherit = false})&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Remove the binary files of &lt;code class=&quot;highlighter-rouge&quot;&gt;tbox.pkg&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;/Zi&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;/ZI&lt;/code&gt; for msvc&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix target deps&lt;/li&gt;
  &lt;li&gt;Fix &lt;code class=&quot;highlighter-rouge&quot;&gt;target:add&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;option:add&lt;/code&gt; bug&lt;/li&gt;
  &lt;li&gt;Fix compilation and installation bug on archlinux&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;usage-video&quot;&gt;Usage Video&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/133693.js&quot; id=&quot;asciicast-133693&quot; async=&quot;&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Wed, 16 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2017/08/16/update-v2.1.6/</link>
        <guid isPermaLink="true">http://www.tboox.org/2017/08/16/update-v2.1.6/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>released</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>更细粒度的文件编译选项控制</title>
        <description>&lt;p&gt;之前的版本对编译控制粒度，只能到target这一级：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 全局根配置，所有target都会被影响&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ROOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- target目标配置，只对test目标下的所有源文件编译生效&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最近给2.1.6开发版本中的&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;进行了改进，支持基于files更细粒度的编译选项控制，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_defines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test/*.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test2/test2.c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TEST2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c99&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includedirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cflags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-O0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;的最后一个参数，传入一个配置table，去控制指定files的编译选项，里面的配置参数跟target的一致，并且这些文件还会继承target的通用配置&lt;code class=&quot;highlighter-rouge&quot;&gt;-DTEST1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;针对&lt;code class=&quot;highlighter-rouge&quot;&gt;add_files&lt;/code&gt;的更多描述，见&lt;a href=&quot;http://xmake.io/#/zh/manual?id=targetadd_files&quot;&gt;手册文档&lt;/a&gt;，大家可以下载master版本来预先体验这一新特性。&lt;/p&gt;

</description>
        <pubDate>Thu, 10 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/08/10/config-files-options/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/08/10/config-files-options/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>编译选项</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>使用xmake检测编译器特性支持</title>
        <description>&lt;p&gt;如果我们要写跨平台的c/c++代码，很多时候需要处理由于不同编译器对c/c++各个标准支持力度不同导致的兼容性问题，一般通常的解决办法是：自己在代码中通过宏去判断各个编译器的版本、内置宏、标准库宏、&lt;code class=&quot;highlighter-rouge&quot;&gt;__has_feature&lt;/code&gt;等来检测处理。&lt;/p&gt;

&lt;p&gt;自己如果在代码中按上述的方式检测，会很繁琐，尤其是像c++这种存在大量语法特性，如果一一检测过来，工作量是非常大的。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;通过构建工具预先检测编译特性&lt;/h4&gt;

&lt;p&gt;另外比较省事的方式，就是依赖构建工具提前做好检测，然后把检测结果作为宏添加到编译中去，这样代码只需要判断对应的特性宏是否存在，就可以进行处理了。&lt;/p&gt;

&lt;p&gt;在cmake中就有类似的检测机制，非常强大，因此xmake也对其进行了支持，提供更加灵活强大的编译器特性预先检测支持:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;core.tool.compiler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx_constexpr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;defines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HAS_CXX_CONSTEXPR=1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;core.tool.compiler&lt;/code&gt;模块的&lt;a href=&quot;http://xmake.io/#/zh/manual?id=compiler-has_features&quot;&gt;compiler.has_features&lt;/a&gt;接口，在&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;中预先判断当前编译期支持的语言特性，实现条件编译。&lt;/p&gt;

&lt;p&gt;此处也是参考了cmake的设计，具体详情见：&lt;a href=&quot;https://github.com/tboox/xmake/issues/83&quot;&gt;issues#83&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;上述代码，在加载target的时候，判断当前编译器是否支持c++的常量表达式语法特性，如果支持则添加宏定义：&lt;code class=&quot;highlighter-rouge&quot;&gt;HAS_CXX_CONSTEXPR=1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我们也可以在判断时候，追加一些参数控制编译选项，例如上述特性需要&lt;code class=&quot;highlighter-rouge&quot;&gt;c++11&lt;/code&gt;支持，我们可以启用它：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c_static_assert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx_constexpr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过上面的代码可以看到，此接口是可以同时检测多个特性的，返回值为实际支持的特性列表。&lt;/p&gt;

&lt;p&gt;如果之前对这个target已经设置了&lt;code class=&quot;highlighter-rouge&quot;&gt;c++11&lt;/code&gt;，那么我们也可以传入target对象，继承target的所有设置，甚至指定一些其他扩展编译配置：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx_constexpr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includedirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;批量编译器特性检测&lt;/h4&gt;

&lt;p&gt;c++的语言特性非常多，这个时候我们可以通过脚本实现快速的批量检测：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;on_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;core.tool.compiler&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 传入target在检测特性时继承target的所有编译配置&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;defines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;has_feature_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述代码，会在加载target的时候，把当前编译器对c++的所有支持特性，都添加到target的宏定义中进行编译，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dhas_feature_cxx_constexpr&lt;/code&gt;。
我们只需要在代码中，通过判断对应的特性宏是否存在就行了:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifdef has_feature_cxx_constexpr
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// TODO
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;目前支持的所有c/c++编译器特性列表，见：&lt;a href=&quot;http://xmake.io/#/zh/manual?id=compiler-features&quot;&gt;compiler.features&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;更加底层的检测接口&lt;/h4&gt;

&lt;p&gt;如果我们要指定获取具体哪个编译器的特性支持，则需要更加底层的接口支持了，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib.detect.has_features&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx_constexpr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx_constexpr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c_static_assert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-O0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xcrun -sdk macosx clang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cxx_constexpr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c_static_assert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://xmake.io/#/zh/manual?id=detect-has_features&quot;&gt;lib.detect.has_features&lt;/a&gt;属于探测模块的接口，可以指定需要检测的工具名，例如这里通过传入clang，只对clang编译器进行检测。&lt;/p&gt;

&lt;p&gt;当然此接口，还可以检测其他非编译器的工具特性，更加的通用。&lt;/p&gt;

&lt;h4 id=&quot;cc&quot;&gt;通过自定义c/c++代码片段来检测特性&lt;/h4&gt;

&lt;p&gt;对于一些复杂的编译器特性，连&lt;a href=&quot;http://xmake.io/#/zh/manual?id=compiler-has_features&quot;&gt;compiler.has_features&lt;/a&gt;都无法检测到的时候，可以通过自定义代码片段尝试编译来检测它。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib.detect.check_cxsnippets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_cxsnippets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;constexpr int f(int x) { return x ? x+f(x-1) : 0; } constexpr int x = f(5); static_assert(x == 15);&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcekind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cxx11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上述代码通过自定义一个constexpr的测试代码，去检测c++11的constexpr支持。&lt;/p&gt;

&lt;p&gt;此接口是&lt;a href=&quot;http://xmake.io/#/zh/manual?id=detect-has_cfuncs&quot;&gt;detect.has_cfuncs&lt;/a&gt;, &lt;a href=&quot;http://xmake.io/#/zh/manual?id=detect-has_cincludes&quot;&gt;detect.has_cincludes&lt;/a&gt;和&lt;a href=&quot;http://xmake.io/#/zh/manual?id=detect-has_ctypes&quot;&gt;detect.has_ctypes&lt;/a&gt;等接口的通用版本，也更加底层。&lt;/p&gt;

&lt;p&gt;因此我们可以用它来检测：types, functions, includes 还有 links，或者是组合起来一起检测。&lt;/p&gt;

&lt;p&gt;第一个参数为代码片段列表，一般用于一些自定义特性的检测，如果为空，则可以仅仅检测可选参数中条件，例如：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_cxsnippets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;void test() {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;void test2() {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wchar_t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;char*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stdio.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;funcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sigsetjmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sigsetjmp((void*)0, 0)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面那个调用，会去同时检测types, includes和funcs是否都满足，如果通过返回true。&lt;/p&gt;

</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/08/08/compiler-features/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/08/08/compiler-features/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>cmake</category>
        
        <category>编译器特性检测</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.1.5 released, lots of new feature updates</title>
        <description>&lt;p&gt;This release introduces a number of new feature updates, as detailed in &lt;a href=&quot;http://tboox.org/2017/07/29/new-features-v2.1.5/&quot;&gt;Some new features of xmake v2.1.5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to known more usage, please see &lt;a href=&quot;http://xmake.io/#/home&quot;&gt;online documents&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/83&quot;&gt;#83&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;add_csnippet&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxxsnippet&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;option&lt;/code&gt; for detecting some compiler features.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/83&quot;&gt;#83&lt;/a&gt;: Add user extension modules to detect program, libraries and files.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;find_program&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;find_file&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;find_library&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;find_tool&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;find_package&lt;/code&gt; module interfaces.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;net.*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;devel.*&lt;/code&gt; extension modules&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;val()&lt;/code&gt; api to get the value of builtin-variable, .e.g &lt;code class=&quot;highlighter-rouge&quot;&gt;val(&quot;host&quot;)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;val(&quot;env PATH&quot;)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;val(&quot;shell echo hello&quot;)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;val(&quot;reg HKEY_LOCAL_MACHINE\\XX;Value&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Support to compile the microsoft resource file (.rc)&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;has_flags&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;features&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;has_features&lt;/code&gt; for detect module interfaces.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;option.on_check&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;option.after_check&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;option.before_check&lt;/code&gt; api&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;target.on_load&lt;/code&gt; api&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/132&quot;&gt;#132&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;add_frameworkdirs&lt;/code&gt; api&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;lib.detect.has_xxx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lib.detect.find_xxx&lt;/code&gt; apis.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;add_moduledirs&lt;/code&gt; api&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt; api instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;add_subdirs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;add_subfiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/133&quot;&gt;#133&lt;/a&gt;: Improve the project plugin to generate &lt;code class=&quot;highlighter-rouge&quot;&gt;compile_commands.json&lt;/code&gt; by run  &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k compile_commands&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;set_pcheader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set_pcxxheader&lt;/code&gt; to support the precompiled header, support gcc, clang, msvc&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -p cross&lt;/code&gt; platform and support the custom platform&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/87&quot;&gt;#87&lt;/a&gt;: Add includes and links from target deps automatically&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; to load user extension and global modules&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/pull/93&quot;&gt;#93&lt;/a&gt;: Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake lua&lt;/code&gt; to run a single line command&lt;/li&gt;
  &lt;li&gt;Improve to print gcc error and warning info&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; interface to dump table&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/111&quot;&gt;#111&lt;/a&gt;: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;--root&lt;/code&gt; common option to allow run xmake command as root&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/pull/113&quot;&gt;#113&lt;/a&gt;: Privilege manage when running as root, store the root privilege and degrade.&lt;/li&gt;
  &lt;li&gt;Improve &lt;code class=&quot;highlighter-rouge&quot;&gt;xxx_script&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt; to support pattern match, .e.g &lt;code class=&quot;highlighter-rouge&quot;&gt;on_build(&quot;iphoneos|arm*&quot;, function (target) end)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;improve builtin-variables to support to get the value envirnoment and registry&lt;/li&gt;
  &lt;li&gt;Improve to detect vstudio sdk and cross toolchains envirnoment&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/71&quot;&gt;#71&lt;/a&gt;: Improve to detect compiler and linker from env vars&lt;/li&gt;
  &lt;li&gt;Improve the option detection (cache and multi-jobs) and increase 70% speed&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/129&quot;&gt;#129&lt;/a&gt;: Check link deps and cache the target file&lt;/li&gt;
  &lt;li&gt;Support &lt;code class=&quot;highlighter-rouge&quot;&gt;*.asm&lt;/code&gt; source files for vs201x project plugin&lt;/li&gt;
  &lt;li&gt;Mark &lt;code class=&quot;highlighter-rouge&quot;&gt;add_bindings&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;add_rbindings&lt;/code&gt; as deprecated&lt;/li&gt;
  &lt;li&gt;Optimize &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake rebuild&lt;/code&gt; speed on windows&lt;/li&gt;
  &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;core.project.task&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;core.base.task&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;app2ipa&lt;/code&gt; plugins to &lt;a href=&quot;https://github.com/tboox/xmake-plugins&quot;&gt;xmake-plugins&lt;/a&gt; repo.&lt;/li&gt;
  &lt;li&gt;Add new api &lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_header(&quot;config.h&quot;, {prefix = &quot;&quot;})&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_h&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_h_prefix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix &lt;code class=&quot;highlighter-rouge&quot;&gt;try-catch-finally&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Fix interpreter bug when parsing multi-level subdirs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/pull/115&quot;&gt;#115&lt;/a&gt;: Fix the path problem of the install script &lt;code class=&quot;highlighter-rouge&quot;&gt;get.sh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Fix cache bug for import()&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2017/08/05/update-v2.1.5/</link>
        <guid isPermaLink="true">http://www.tboox.org/2017/08/05/update-v2.1.5/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>version</category>
        
        <category>precompiled_header</category>
        
        <category>compiler</category>
        
        <category>cmake</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.1.5版本正式发布，大量新特性更新</title>
        <description>&lt;p&gt;此版本带来了大量新特性更新，具体详见：&lt;a href=&quot;http://tboox.org/cn/2017/07/29/new-features-v2.1.5/&quot;&gt;xmake v2.1.5版本新特性介绍&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;更多使用说明，请阅读：&lt;a href=&quot;http://xmake.io/#/zh/&quot;&gt;文档手册&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/tboox/xmake&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://gitee.com/tboox/xmake&quot;&gt;Gitee&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/83&quot;&gt;#83&lt;/a&gt;: 添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;add_csnippet&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;add_cxxsnippet&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;option&lt;/code&gt;来检测一些编译器特性&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/83&quot;&gt;#83&lt;/a&gt;: 添加用户扩展模块去探测程序，库文件以及其他主机环境&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;find_program&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;find_file&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;find_library&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;find_tool&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;find_package&lt;/code&gt; 等模块接口&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;net.*&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;devel.*&lt;/code&gt;扩展模块&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;val()&lt;/code&gt;接口去获取内置变量，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;val(&quot;host&quot;)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;val(&quot;env PATH&quot;)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;val(&quot;shell echo hello&quot;)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;val(&quot;reg HKEY_LOCAL_MACHINE\\XX;Value&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;增加对微软.rc资源文件的编译支持，当在windows上编译时，可以增加资源文件了&lt;/li&gt;
  &lt;li&gt;增加&lt;code class=&quot;highlighter-rouge&quot;&gt;has_flags&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;features&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;has_features&lt;/code&gt;等探测模块接口&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;option.on_check&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;option.after_check&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;option.before_check&lt;/code&gt; 接口&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;target.on_load&lt;/code&gt;接口&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/132&quot;&gt;#132&lt;/a&gt;: 添加&lt;code class=&quot;highlighter-rouge&quot;&gt;add_frameworkdirs&lt;/code&gt;接口&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;lib.detect.has_xxx&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;lib.detect.find_xxx&lt;/code&gt;接口&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;add_moduledirs&lt;/code&gt;接口在工程中定义和加载扩展模块&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt;接口替换&lt;code class=&quot;highlighter-rouge&quot;&gt;add_subdirs&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;add_subfiles&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/133&quot;&gt;#133&lt;/a&gt;: 改进工程插件，通过运行&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake project -k compile_commands&lt;/code&gt;来导出&lt;code class=&quot;highlighter-rouge&quot;&gt;compile_commands.json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;set_pcheader&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;set_pcxxheader&lt;/code&gt;去支持跨编译器预编译头文件，支持&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;msvc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -p cross&lt;/code&gt;平台用于交叉编译，并且支持自定义平台名&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/87&quot;&gt;#87&lt;/a&gt;: 为依赖库目标自动添加：&lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;links&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;接口，去加载用户扩展模块&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/pull/93&quot;&gt;#93&lt;/a&gt;: 改进 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake lua&lt;/code&gt;，支持运行单行命令和模块&lt;/li&gt;
  &lt;li&gt;改进编译错误提示信息输出&lt;/li&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;接口去更好些显示table数据&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/111&quot;&gt;#111&lt;/a&gt;: 添加&lt;code class=&quot;highlighter-rouge&quot;&gt;--root&lt;/code&gt;通用选项去临时支持作为root运行&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/pull/113&quot;&gt;#113&lt;/a&gt;: 改进权限管理，现在作为root运行也是非常安全的&lt;/li&gt;
  &lt;li&gt;改进&lt;code class=&quot;highlighter-rouge&quot;&gt;xxx_script&lt;/code&gt;工程描述api，支持多平台模式选择, 例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;on_build(&quot;iphoneos|arm*&quot;, function (target) end)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;改进内置变量，支持环境变量和注册表数据的获取&lt;/li&gt;
  &lt;li&gt;改进vstudio环境和交叉工具链的探测&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/71&quot;&gt;#71&lt;/a&gt;: 改进从环境变量中探测链接器和编译器&lt;/li&gt;
  &lt;li&gt;改进option选项检测，通过多任务检测，提升70%的检测速度&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/issues/129&quot;&gt;#129&lt;/a&gt;: 检测链接依赖，如果源文件没有改变，就不必重新链接目标文件了&lt;/li&gt;
  &lt;li&gt;在vs201x工程插件中增加对&lt;code class=&quot;highlighter-rouge&quot;&gt;*.asm&lt;/code&gt;文件的支持&lt;/li&gt;
  &lt;li&gt;标记&lt;code class=&quot;highlighter-rouge&quot;&gt;add_bindings&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;add_rbindings&lt;/code&gt;为废弃接口&lt;/li&gt;
  &lt;li&gt;优化&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake rebuild&lt;/code&gt;在windows上的构建速度&lt;/li&gt;
  &lt;li&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;core.project.task&lt;/code&gt;模块迁移至&lt;code class=&quot;highlighter-rouge&quot;&gt;core.base.task&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;app2ipa&lt;/code&gt; 插件迁移到 &lt;a href=&quot;https://github.com/tboox/xmake-plugins&quot;&gt;xmake-plugins&lt;/a&gt; 仓库&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_header(&quot;config.h&quot;, {prefix = &quot;&quot;})&lt;/code&gt; 代替 &lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_h&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;set_config_h_prefix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复&lt;code class=&quot;highlighter-rouge&quot;&gt;try-catch-finally&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;修复解释器bug，解决当加载多级子目录时，根域属性设置不对&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tboox/xmake/pull/115&quot;&gt;#115&lt;/a&gt;: 修复安装脚本&lt;code class=&quot;highlighter-rouge&quot;&gt;get.sh&lt;/code&gt;的路径问题&lt;/li&gt;
  &lt;li&gt;修复&lt;code class=&quot;highlighter-rouge&quot;&gt;import()&lt;/code&gt;导入接口的缓存问题&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/08/05/update-v2.1.5/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/08/05/update-v2.1.5/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>版本更新</category>
        
        <category>包查找</category>
        
        <category>编译器特性检测</category>
        
        <category>预编译头文件</category>
        
        <category>扩展模块</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>不同编译器对预编译头文件的处理</title>
        <description>&lt;p&gt;最近为了给&lt;a href=&quot;http://xmake.io&quot;&gt;xmake&lt;/a&gt;实现预编译头文件的支持，研究了下各大主流编译器处理预编译头的机制以及之间的一些差异。&lt;/p&gt;

&lt;p&gt;现在的大部分c/c++编译器都是支持预编译头的，例如：gcc，clang，msvc等，用于优化c++代码的编译速度，毕竟c++的头文件如果包含了模板定义的话，编译速度是很慢的，
如果能够吧大部分通用的头文件放置在一个&lt;code class=&quot;highlighter-rouge&quot;&gt;header.h&lt;/code&gt;中，在其他源码编译之前预先对其进行编译，之后的代码都能重用这部分预编译头，就可以极大程度上减少频繁的头文件冗余编译。&lt;/p&gt;

&lt;p&gt;但是不同编译器对它的支持力度和处理方式，还是有很大差异的，并不是非常通用，在xmake中封装成统一的接口和使用方式，还是费了很大的功夫才搞定。&lt;/p&gt;

&lt;h4 id=&quot;msvc&quot;&gt;msvc的预编译头处理&lt;/h4&gt;

&lt;p&gt;预编译头在msvc的项目中很常见，经常会看到类似&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.cpp&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h&lt;/code&gt;的文件，就是用于此目的，而msvc编译器是通过编译&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.cpp&lt;/code&gt;来生成预编译头文件&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.pch&lt;/code&gt;的。&lt;/p&gt;

&lt;p&gt;创建预编译头的命令行如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cl.exe -c -Yc -Fpstdafx.pch -Fostdafx.obj stdafx.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，&lt;code class=&quot;highlighter-rouge&quot;&gt;-Yc&lt;/code&gt;就是创建预编译头&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.pch&lt;/code&gt;的意思，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-Fp&lt;/code&gt;来指定&lt;code class=&quot;highlighter-rouge&quot;&gt;*.pch&lt;/code&gt;的输出文件路径，用&lt;code class=&quot;highlighter-rouge&quot;&gt;-Fo&lt;/code&gt;指定编译&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.cpp&lt;/code&gt;生成对象文件。&lt;/p&gt;

&lt;p&gt;其他源码是如何使用这个&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.pch&lt;/code&gt;的呢，通过将&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h&lt;/code&gt;传入&lt;code class=&quot;highlighter-rouge&quot;&gt;-Yu&lt;/code&gt;来告诉编译器，编译当前代码，忽略&lt;code class=&quot;highlighter-rouge&quot;&gt;#include &quot;stdafx.h&quot;&lt;/code&gt;，直接使用已经编译好的&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.pch&lt;/code&gt;文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cl.exe -c -Yustdafx.h -Fpstdafx.pch -Fotest.obj test.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后链接的时候，需要把：&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.obj&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;test.obj&lt;/code&gt;都连接上才行，这个也是和gcc, clang编译器不同的地方。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;link.exe -out:test test.obj stdafx.obj
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注：一定要吧&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.obj&lt;/code&gt;也链接上哦，虽然&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.cpp&lt;/code&gt;仅用于生成&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.pch&lt;/code&gt;，但是对象文件也是需要。&lt;/p&gt;

&lt;p&gt;还有个跟gcc, clang有区别的地方是，msvc的&lt;code class=&quot;highlighter-rouge&quot;&gt;-Yu&lt;/code&gt;指定&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h&lt;/code&gt;必须是&lt;code class=&quot;highlighter-rouge&quot;&gt;#include &quot;stdafx.h&quot;&lt;/code&gt;中的头文件名字，不是文件路径哦。&lt;/p&gt;

&lt;h4 id=&quot;clang&quot;&gt;clang的预编译头文件处理&lt;/h4&gt;

&lt;p&gt;个人感觉clang的预编译头文件支持方式最为友好，也最为简单。&lt;/p&gt;

&lt;p&gt;相比于msvc，不需要&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.cpp&lt;/code&gt;，只需要一个头文件&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h&lt;/code&gt;就可以生成pch文件。
相比于gcc，可以灵活控制pch文件的路径，更加灵活。&lt;/p&gt;

&lt;p&gt;编译头文件生成pch文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;clang -c -o stdafx.pch stdafx.h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用预编译头文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;clang -c -include stdafx.h -include-pch stdafx.pch -o test.o test.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;-include stdafx.h&lt;/code&gt;用于忽略编译&lt;code class=&quot;highlighter-rouge&quot;&gt;test.cpp&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;#include &quot;stdafx.h&quot;&lt;/code&gt;，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-include-pch&lt;/code&gt;使用预先编译好的&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.pch&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;并且这里指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.pch&lt;/code&gt;不仅可以是在includedir搜索路径下的文件，也可以指定全路径文件名，非常灵活，例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;clang -c -include inc/stdafx.h -include-pch out/stdafx.pch -o test.o test.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;gcc&quot;&gt;gcc的预编译头文件处理&lt;/h4&gt;

&lt;p&gt;gcc的预编译头处理方式基本上跟clang的类似，唯一的区别就是：它不支持&lt;code class=&quot;highlighter-rouge&quot;&gt;-include-pch&lt;/code&gt;参数，因此不能所以指定使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.pch&lt;/code&gt;文件路径。&lt;/p&gt;

&lt;p&gt;它有自己的搜索规则：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h&lt;/code&gt;所在目录中，查找&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h.pch&lt;/code&gt;文件是否存在&lt;/li&gt;
  &lt;li&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;-I&lt;/code&gt;的头文件搜索路径找查找&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h.pch&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;编译头文件生成pch文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcc -c -o stdafx.pch stdafx.h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用预编译头文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcc -c -include stdafx.h -o test.o test.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为了让上述代码正常编译，&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h.pch&lt;/code&gt;必须放置在&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h&lt;/code&gt;的相同目录下，这样编译才能找到，目前我还没有找到可以所以指定输出目录的方法。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;其他注意点&lt;/h4&gt;

&lt;p&gt;gcc、clang对于&lt;code class=&quot;highlighter-rouge&quot;&gt;*.h&lt;/code&gt;的头文件编译，默认是作为c预编译头来使用的，这跟c++的pch是不一样的，无法给c++的代码使用，如果要生成c++可用的pch文件，必须要告诉编译器，如何去编译&lt;code class=&quot;highlighter-rouge&quot;&gt;stdafx.h&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这个可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-x c++-header&lt;/code&gt;参数来解决：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcc -c -x c++-header -o stdafx.pch stdafx.h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然也可以通过修改后缀名来解决：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcc -c -o stdafx.pch stdafx.hpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;xmake&quot;&gt;xmake对预编译头文件的支持&lt;/h4&gt;

&lt;p&gt;xmake支持通过预编译头文件去加速&lt;code class=&quot;highlighter-rouge&quot;&gt;c/c++&lt;/code&gt;程序编译，目前支持的编译器有：gcc, clang和msvc。&lt;/p&gt;

&lt;p&gt;对于c预编译头文件的使用方式如下：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_pcheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;header.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果是对c++头文件的预编译，改成：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set_pcxxheader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;header.h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;更多使用说明见：&lt;a href=&quot;http://xmake.io/#/zh/manual?id=targetset_pcheader&quot;&gt;target.set_pcheader&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;参考资料&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://itscompiling.eu/2017/01/12/precompiled-headers-cpp-compilation&quot;&gt;Speed up C++ compilation, part 1: precompiled headers&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2017/07/31/precompiled-header/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2017/07/31/precompiled-header/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>预编译头文件</category>
        
        <category>c++编译加速</category>
        
        <category>优化编译</category>
        
        <category>跨平台</category>
        
        
        <category>xmake</category>
        
      </item>
    
  </channel>
</rss>
