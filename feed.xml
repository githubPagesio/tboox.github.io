<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TBOOX Open Source Project</title>
    <description>Focus on cross-platform development using c language</description>
    <link>http://www.tboox.org/</link>
    <atom:link href="http://www.tboox.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 03 Sep 2016 18:44:02 +0800</pubDate>
    <lastBuildDate>Sat, 03 Sep 2016 18:44:02 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>xmake v2.0.4 released!</title>
        <description>&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add native shell support for &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;. .e.g &lt;code class=&quot;highlighter-rouge&quot;&gt;add_ldflags(&quot;$(shell pkg-config --libs sqlite3)&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enable pdb symbol files for windows&lt;/li&gt;
  &lt;li&gt;Add debugger support on windows (vsjitdebugger, ollydbg, windbg … )&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;getenv&lt;/code&gt; interface for the global scope of &lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add plugin for generating vstudio project file (vs2002 - vs2015)&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;set_default&lt;/code&gt; api for option&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Improve builtin-variable format&lt;/li&gt;
  &lt;li&gt;Support option for string type&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix check ld failed without g++ on linux&lt;/li&gt;
  &lt;li&gt;Fix compile &lt;code class=&quot;highlighter-rouge&quot;&gt;*.cxx&lt;/code&gt; files failed&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2016/08/29/update-v2.0.4/</link>
        <guid isPermaLink="true">http://www.tboox.org/2016/08/29/update-v2.0.4/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>version</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake v2.0.4发布！</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;中添加原生shell支持，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;add_ldflags(&quot;$(shell pkg-config --libs sqlite3)&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;编译windows目标程序，默认默认启用pdb符号文件&lt;/li&gt;
  &lt;li&gt;在windows上添加调试器支持（vsjitdebugger, ollydbg, windbg … ）&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;getenv&lt;/code&gt;接口到&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake.lua&lt;/code&gt;的全局作用域中&lt;/li&gt;
  &lt;li&gt;添加生成vstudio工程插件(支持：vs2002 - vs2015)&lt;/li&gt;
  &lt;li&gt;为option添加&lt;code class=&quot;highlighter-rouge&quot;&gt;set_default&lt;/code&gt;接口&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;增强内建变量的处理&lt;/li&gt;
  &lt;li&gt;支持字符串类型的选项option设置&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复在linux下检测ld连接器失败，如果没装g++的话&lt;/li&gt;
  &lt;li&gt;修复&lt;code class=&quot;highlighter-rouge&quot;&gt;*.cxx&lt;/code&gt;编译失败问题&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/08/29/update-v2.0.4/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/08/29/update-v2.0.4/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>版本更新</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>The xmake plugin for generating vstudio project file (vs2002 - 2015)</title>
        <description>&lt;p&gt;Xmake provide a builtin-plugin for generating VisualStudio project file (vs2002 - 2015) now.&lt;/p&gt;

&lt;p&gt;.e.g&lt;/p&gt;

&lt;p&gt;We need enter the project directory first and run the following command if we want to generate vs2013 project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2013
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will generate a directory(vs2013) in the current project and the directory structure is similar to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vs2013
├── demo
│   └── demo.vcxproj
├── tbox
│   └── tbox.vcxproj
└── tbox.sln
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We also modify the other building directory manulally.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -o f:&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;uild
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2015
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or we set the other VisualStudio project directory.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2008 f:&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;sproject
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also configure some other options before generate VisualStudio project and building it.&lt;/p&gt;

&lt;p&gt;.e.g&lt;/p&gt;

&lt;p&gt;Generate the project for building the debug version.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -m debug
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2015
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or Disable some modules and re-generate vs project.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f --demo&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n --openssl&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n --xml&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;n
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2015
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Xmake can also build project directly without the VisualStudio project file.&lt;/p&gt;

&lt;p&gt;We need only open cmd windows and run the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Done! :)&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2016/08/29/generate-vs2015-project/</link>
        <guid isPermaLink="true">http://www.tboox.org/2016/08/29/generate-vs2015-project/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>VisualStudio</category>
        
        <category>plugin</category>
        
        <category>vs2008</category>
        
        <category>vs2015</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>xmake支持vs2002-vs2015工程文件生成</title>
        <description>&lt;p&gt;xmake master上最新版本已经支持vs2002-vs2015工程文件的生成，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt;插件的方式提供，例如：&lt;/p&gt;

&lt;p&gt;创建vs2013工程文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2013
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;默认输出目录是在当前工程的下面，会生成一个vs2008的工程文件夹，打开解决方案编译后，默认的输出文件路径跟xmake.lua描述的是完全一致的，一般都是在build目录下&lt;/p&gt;

&lt;p&gt;除非你手动指定其他的构建目录，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake f -o /tmp/build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;创建vs2008工程文件，并且创建工程文件到指定目录：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2008 f:&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;sproject
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;需要注意的是，xmake只会生成当前配置模式下的工程文件，如果当前配置的是debug版本：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -m debug
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2015
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那么生成的工程文件，也是用来编译debug版本，如果想要编译release或者其他模式版本，需要重新配置下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake f -m release
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;xmake project -k vs2015
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以tbox为例，生成后的 vs2013 目录结构如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vs2013
├── demo
│   └── demo.vcxproj
├── tbox
│   └── tbox.vcxproj
└── tbox.sln
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其实大部分情况下，我们并不需要生成vs的工程文件来编译，大部分情况下，使用xmake的直接编译，已经对vs的编译器进行原生支持。&lt;/p&gt;

&lt;p&gt;我们可以直接在cmd的终端下面，直接执行&lt;code class=&quot;highlighter-rouge&quot;&gt;xmake&lt;/code&gt;来快速编译windows程序哦。。：）&lt;/p&gt;

</description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/08/29/generate-vs2015-project/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/08/29/generate-vs2015-project/</guid>
        
        <category>xmake</category>
        
        <category>lua</category>
        
        <category>VisualStudio</category>
        
        <category>vs2008</category>
        
        
        <category>xmake</category>
        
      </item>
    
      <item>
        <title>tbox v1.5.3 released!</title>
        <description>&lt;h3 id=&quot;new-features&quot;&gt;New features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add wait multi-processes interface&lt;/li&gt;
  &lt;li&gt;Add uuid generator&lt;/li&gt;
  &lt;li&gt;Add hash library module&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;__tb_deprecated__&lt;/code&gt; keyword and option&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changes&quot;&gt;Changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Move some utils interfaces to the hash module&lt;/li&gt;
  &lt;li&gt;Rewrite random generator&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs-fixed&quot;&gt;Bugs fixed&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fix stdout compatibility issue for vs2015&lt;/li&gt;
  &lt;li&gt;Fix process arguments length limit&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2016/08/29/update-v1.5.3/</link>
        <guid isPermaLink="true">http://www.tboox.org/2016/08/29/update-v1.5.3/</guid>
        
        <category>tbox</category>
        
        <category>version</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>tbox v1.5.3发布！</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;新特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;增加同时等待多个进程接口&lt;/li&gt;
  &lt;li&gt;增加uuid生成器&lt;/li&gt;
  &lt;li&gt;增加hash库模块&lt;/li&gt;
  &lt;li&gt;添加&lt;code class=&quot;highlighter-rouge&quot;&gt;__tb_deprecated__&lt;/code&gt;关键字以及配置选项&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;改进&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;移动部分utils接口到hash模块&lt;/li&gt;
  &lt;li&gt;重写random生成器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs修复&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;修复stdout在vs2015以上版本的兼容性问题&lt;/li&gt;
  &lt;li&gt;修复进程参数长度限制&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/08/29/update-v1.5.3/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/08/29/update-v1.5.3/</guid>
        
        <category>tbox</category>
        
        <category>版本发布</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>tbox stream流的架构介绍</title>
        <description>&lt;p&gt;tbox主要有三种流：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;stream&lt;/strong&gt;: 最常用的流，一般用于单路阻塞、非阻塞io的处理，接口简单易用&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;async_stream&lt;/strong&gt;：异步流，基于asio的流，全程回调处理，可以在单个线程里支持多路流的并发，节省系统资源，提高效率&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;static_stream&lt;/strong&gt;：静态流，用于对纯buffer的位流处理，一般用于各种解析器&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不管是stream还是async_stream，都可以在其上挂接多路filter，实现流之间数据过滤和变换。目前支持以下几种filter：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;zip_filter：gzip&lt;/strong&gt;、zlib的压缩和解压缩过滤器&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;charset_filter&lt;/strong&gt;：字符集编码的过滤器&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;chunked_filter：http&lt;/strong&gt; chunked编码的解码过滤器&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果在一个xml解析器上同时挂接：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http/xml =&amp;gt; chunked_filter =&amp;gt; zip_filter =&amp;gt; charset_filter =&amp;gt; stream/async_stream =&amp;gt; xml_reader
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以实现对xml文件的边下载、边解压、边转码、边解析，这样就可以完美支持大规模xml数据的解析支持，而且内存使用率也不会太高&lt;/p&gt;

&lt;p&gt;还有两种&lt;strong&gt;基于流的传输器&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;transfer&lt;/strong&gt;：基于两路stream的传输器，可以用于简单的http下载、上传、文件之间的copy等等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;async_transfer&lt;/strong&gt;：基于&lt;code class=&quot;highlighter-rouge&quot;&gt;async_stream&lt;/code&gt;的异步传输器，可以用于多路并发io传输。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;还有一个对&lt;code class=&quot;highlighter-rouge&quot;&gt;async_transfer&lt;/code&gt;进行管理的传输池：&lt;strong&gt;transfer_pool&lt;/strong&gt;，你可以把各种下载任务、上传任务以及其他io传输任务，一股脑的扔到池子里面去，什么时候哪个任务传输完了，传输了多少，都有进度回调报告状态，用起来相当方便。&lt;/p&gt;

&lt;p&gt;目前的流可以支持如下几种url格式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;data://base64&lt;/li&gt;
  &lt;li&gt;file://path or unix path: e.g. /root/xxxx/file&lt;/li&gt;
  &lt;li&gt;sock://host:port?tcp=&lt;/li&gt;
  &lt;li&gt;sock://host:port?udp=&lt;/li&gt;
  &lt;li&gt;socks://host:port&lt;/li&gt;
  &lt;li&gt;http://host:port/path?arg0=&amp;amp;arg1=…&lt;/li&gt;
  &lt;li&gt;https://host:port/path?arg0=&amp;amp;arg1=…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体架构见下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/img/tbox/streamarch.png&quot; alt=&quot;流架构&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 27 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/08/27/stream-architecture/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/08/27/stream-architecture/</guid>
        
        <category>tbox</category>
        
        <category>stream</category>
        
        <category>流架构</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>tbox stream流的使用</title>
        <description>&lt;p&gt;stream是tbox的最常用的流，一般用于单路io操作，既可以进行阻塞读写，也可以非阻塞的读写。&lt;/p&gt;

&lt;p&gt;目前可以支持 数据、文件、套接字、http协议以及各种过滤器的读写操作，也可以很方便的自定义扩展自己的流模块。&lt;/p&gt;

&lt;p&gt;之前已经在&lt;a href=&quot;/cn/2016/08/12/bits-operation/&quot;&gt;tbox数据位操作接口的使用&lt;/a&gt;一文中，简单介绍了下stream的位读写接口，这里继续详细介绍下stream的常用数据读写接口。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;流的常用初始化操作&lt;/h4&gt;

&lt;p&gt;下面直接上代码吧，基本上看下注释就知道怎么使用了，嘿嘿。。。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// 初始化文件流
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root/home/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root/home/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_FILE_MODE_RW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_FILE_MODE_CREAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_FILE_MODE_BINARY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_FILE_MODE_TRUNC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化http流
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.xxxx.com/file?args=xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;www.xxxx.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/file?args=xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化tcp流
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sock://localhost/8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_SOCKET_TYPE_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化udp流
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sock://localhost/8080?udp=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_SOCKET_TYPE_UDP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化数据流
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data://base64_data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化字符集编码流
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_filter_from_charset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_CHARSET_TYPE_UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_CHARSET_TYPE_GBK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化gzip解压缩流
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_filter_from_zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_ZIP_ALGO_GZIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_ZIP_ACTION_INFLATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-1&quot;&gt;非阻塞读取模式&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// 初始化http流
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.baidu.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 阻塞打开流，如果想在其他线程中断它，可以调用tb_stream_kill来实现
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_stream_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* 判断流是否读取结束
             * 
             * 1. 如果这个流是能获取到文件大小的: 
             * tb_stream_size(stream) &amp;gt;= 0 的情况下， 流读取偏移到流尾部，
             * beof 就直接返回tb_false 表示结束了。
             *
             * 2. 如果这个流是流式， 无法获取实际大小， 比如 http chunked、filter 流
             * tb_stream_size(stream) &amp;lt; 0 的情况下
             * 这个时候 beof 永远是 tb_true， 流的结束 是通过 read 和 wait 来判断的。
             * 
             * 因此这种非阻塞读取模式是完全通用的，针对各种流模式。
             */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tb_byte_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TB_STREAM_BLOCK_MAXN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_stream_beof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 非阻塞读取流数据， real 位实际读取到的大小，如果失败，则返回: -1
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_STREAM_BLOCK_MAXN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// 当前读取不到流数据，等待指定超时间隔的读取事件
&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TB_STREAM_WAIT_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

                    &lt;span class=&quot;c1&quot;&gt;// 检测返回值，如果等待失败，返回：-1，或者等待超时，返回：0， 都对流进行结束读取处理
&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;tb_check_break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 关闭流，stream是可以支持重复打开关闭的
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;tb_stream_clos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 退出流，释放所有资源
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tb_stream_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;阻塞读取模式&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// 初始化file流，支持windows、unix路径
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_stream_ref_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_init_from_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C://home/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 阻塞打开流，如果想在其他线程中断它，可以调用tb_stream_kill来实现
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_stream_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 一次读取TB_STREAM_BLOCK_MAXN， 默认定义大小为：8192 
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;tb_byte_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TB_STREAM_BLOCK_MAXN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tb_hize_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;cm&quot;&gt;/* 获取流的大小
             * 注： tb_hong_t 是 tb_long_t 的升级版表示，也就是 tb_sint64_t
             * 注： tb_hize_t 是 tb_size_t 的升级版表示，也就是 tb_uint64_t
             *
             * 如果size &amp;gt;= 0， 表示这个流是能够预先获取到大小的
             * 如果size &amp;lt; 0， 表示这个流是完全流化，只能一直读直到读取中断，才能获取到实际大小
             *
             */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tb_hong_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// 计算需要读取的大小
&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TB_STREAM_BLOCK_MAXN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                    &lt;span class=&quot;c1&quot;&gt;// 阻塞读取流数据， 如果失败，则返回: tb_false
&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_stream_bread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;c1&quot;&gt;// 保存读取到的大小
&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 需要非阻塞模式读取
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 关闭流，stream是可以支持重复打开关闭的
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;tb_stream_clos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 退出流，释放所有资源
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tb_stream_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-3&quot;&gt;阻塞读取一行数据&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// 失败返回：-1， 成功返回实际读取到的行大小
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_char_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_bread_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-4&quot;&gt;非阻塞模式写入&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// real 位实际写入大小， 写入失败返回：-1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_writ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-5&quot;&gt;阻塞模式写入&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// 写入失败返回 tb_false， 如果要中断写入，可以调用tb_stream_kill
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_bwrit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-6&quot;&gt;刷新同步数据到流&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/* 同步结束数据到流，如果有尾部数据，则会写入， 一般在写完流结束是调用
     * 例如写gzip数据的尾部等等
     * 失败返回：tb_false
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* 同步刷新数据到流，中间想强制刷新数据，则调用这个来写入 一般用于读入双通道的流
     * 例如写socket流包结束，想要等待接收读取时，强制刷新下写缓冲，开始进行读操作
     * 失败返回：tb_false
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tb_bool_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-7&quot;&gt;阻塞写格式化字符数据到流&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// 失败返回：-1， 成功返回实际写入的数据大小
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world: %s, %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12345678&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-8&quot;&gt;阻塞写入一行数据到流&lt;/h4&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// 失败返回： -1,  成功返回实际写入大小
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_long_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_bwrit_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-9&quot;&gt;流的状态&lt;/h4&gt;

&lt;p&gt;如果遇到流读取失败，或者打开失败的情况，想要知道具体失败原因可以通过以下方式：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;tb_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_stream_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

    &lt;span class=&quot;c1&quot;&gt;// 将状态码转成字符串
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tb_char_t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state_cstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tb_state_cstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 25 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/08/25/stream-rw/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/08/25/stream-rw/</guid>
        
        <category>tbox</category>
        
        <category>stream</category>
        
        <category>通用流</category>
        
        
        <category>tbox</category>
        
      </item>
    
      <item>
        <title>TBOOX Open Source Community Established</title>
        <description>&lt;p&gt;TBOOX focus on cross-platform development using c language.&lt;/p&gt;

&lt;p&gt;Welcome to join the &lt;a href=&quot;http://www.tboox.org/forum&quot;&gt;TBOOX Open Source Community&lt;/a&gt; if you want to be interesting to our open source projects.&lt;/p&gt;

&lt;p&gt;：）&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/2016/08/24/forum-opened/</link>
        <guid isPermaLink="true">http://www.tboox.org/2016/08/24/forum-opened/</guid>
        
        <category>tboox</category>
        
        <category>Community</category>
        
        <category>Forum</category>
        
        
        <category>tboox</category>
        
      </item>
    
      <item>
        <title>TBOOX开源社区论坛开通</title>
        <description>&lt;p&gt;TBOOX开源工程专注于c的跨平台开发，如果大家对TBOOX的项目或者对c语言跨平台开发感兴趣&lt;/p&gt;

&lt;p&gt;可以加入&lt;a href=&quot;http://www.tboox.org/forum&quot;&gt;TBOOX开源社区&lt;/a&gt;互相交流或者反馈意见。。&lt;/p&gt;

&lt;p&gt;：）&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://www.tboox.org/cn/2016/08/24/forum-opened/</link>
        <guid isPermaLink="true">http://www.tboox.org/cn/2016/08/24/forum-opened/</guid>
        
        <category>tboox</category>
        
        <category>开源社区</category>
        
        <category>论坛</category>
        
        
        <category>tboox</category>
        
      </item>
    
  </channel>
</rss>
